{
  "stats": {
    "suites": 10,
    "tests": 45,
    "passes": 45,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 45,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2024-09-09T09:16:24.484Z",
    "end": "2024-09-09T09:16:49.136Z",
    "duration": 24652
  },
  "results": [
    {
      "uuid": "91dc7080-9497-4ffd-a514-5c862454dbee",
      "title": "",
      "fullFile": "cypress\\e2e\\Step1- AddHostIp.cy.js",
      "file": "cypress\\e2e\\Step1- AddHostIp.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "01bf0c33-1921-493b-a9bc-84097aa0f065",
          "title": "API Test - Add Host Ip",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TestCase-1: Host Id should be mandatory",
              "fullTitle": "API Test - Add Host Ip TestCase-1: Host Id should be mandatory",
              "timedOut": null,
              "duration": 88,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread(_objectSpread({}, _baseRequest.Req_AddIp), {}, {\n  hostId: '' // Missing Host ID\n});\nconst {\n  responseMessage\n} = this.activityContent.fieldValidation;\nconst expectedResponse = (0, _baseResponse.Error_FieldValidation)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_AddHostIp, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode).to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage).to.eq(expectedResponse.responseMessage);\n});",
              "err": {},
              "uuid": "14164621-f834-4069-a699-67dfe150f2a0",
              "parentUUID": "01bf0c33-1921-493b-a9bc-84097aa0f065",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestCase-2: Host Name should be mandatory",
              "fullTitle": "API Test - Add Host Ip TestCase-2: Host Name should be mandatory",
              "timedOut": null,
              "duration": 59,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread(_objectSpread({}, _baseRequest.Req_AddIp), {}, {\n  hostId: randomHostID,\n  hostName: '' // Missing Host Name\n});\nconst {\n  responseMessage\n} = this.activityContent.fieldValidation;\nconst expectedResponse = (0, _baseResponse.Error_FieldValidation)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_AddHostIp, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode).to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage).to.eq(expectedResponse.responseMessage);\n});",
              "err": {},
              "uuid": "23cd6fd8-5eb2-4fc6-9a28-d821dc5632d6",
              "parentUUID": "01bf0c33-1921-493b-a9bc-84097aa0f065",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestCase-3: Allowed Ip should be mandatory",
              "fullTitle": "API Test - Add Host Ip TestCase-3: Allowed Ip should be mandatory",
              "timedOut": null,
              "duration": 59,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread(_objectSpread({}, _baseRequest.Req_AddIp), {}, {\n  hostId: randomHostID,\n  allowedIp: '' // Missing Allowed IP\n});\nconst {\n  responseMessage\n} = this.activityContent.fieldValidation;\nconst expectedResponse = (0, _baseResponse.Error_FieldValidation)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_AddHostIp, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode).to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage).to.eq(expectedResponse.responseMessage);\n});",
              "err": {},
              "uuid": "3116ab1b-87f2-4dbc-bbbe-4c559ad166b4",
              "parentUUID": "01bf0c33-1921-493b-a9bc-84097aa0f065",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestCase-4: Same Host should allow unique IP",
              "fullTitle": "API Test - Add Host Ip TestCase-4: Same Host should allow unique IP",
              "timedOut": null,
              "duration": 59,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread(_objectSpread({}, _baseRequest.Req_AddIp), {}, {\n  hostId: hostInfo.hostId,\n  allowedIp: randomIp\n});\nconst {\n  responseMessage\n} = this.activityContent.hostIdAdd;\nconst expectedResponse = (0, _baseResponse.Success)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_AddHostIp, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode).to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage).to.eq(expectedResponse.responseMessage);\n});",
              "err": {},
              "uuid": "6a6e2c13-a207-4da5-b4c1-f35ec340ae8b",
              "parentUUID": "01bf0c33-1921-493b-a9bc-84097aa0f065",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestCase-5: Same host Id and Allowed Ip should not be added multiple times",
              "fullTitle": "API Test - Add Host Ip TestCase-5: Same host Id and Allowed Ip should not be added multiple times",
              "timedOut": null,
              "duration": 34,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread(_objectSpread({}, _baseRequest.Req_AddIp), {}, {\n  hostId: \"HID51747660\" // Existing Host ID\n});\nconst {\n  responseMessage\n} = this.activityContent.hostWithIpExist;\nconst expectedResponse = (0, _baseResponse.Error_BusinessError)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_AddHostIp, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode).to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage).to.eq(expectedResponse.responseMessage);\n});",
              "err": {},
              "uuid": "a518c055-5ed9-458b-a285-13797c6e3ea6",
              "parentUUID": "01bf0c33-1921-493b-a9bc-84097aa0f065",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestCase-6: Host Id should be added successfully with valid data",
              "fullTitle": "API Test - Add Host Ip TestCase-6: Host Id should be added successfully with valid data",
              "timedOut": null,
              "duration": 72,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread(_objectSpread({}, _baseRequest.Req_AddIp), {}, {\n  hostId: randomHostID\n});\nconst {\n  responseMessage\n} = this.activityContent.hostIdAdd;\nconst expectedResponse = (0, _baseResponse.Success)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_AddHostIp, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode).to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage).to.eq(expectedResponse.responseMessage);\n  if (response.body.data) {\n    const {\n      hostId\n    } = response.body.data;\n    // Read the existing hostInfo from the JSON file\n    cy.readFile('cypress/fixtures/value/hostInfo.json').then(existingHostInfo => {\n      // Update only the hostId\n      const updatedHostInfo = _objectSpread(_objectSpread({}, existingHostInfo), {}, {\n        hostId\n      });\n      // Write the updated hostInfo back to the JSON file\n      cy.writeFile('cypress/fixtures/value/hostInfo.json', updatedHostInfo).then(() => {\n        cy.log('Host information updated successfully:', updatedHostInfo);\n      });\n    });\n  }\n});",
              "err": {},
              "uuid": "c01ab83d-9f12-482e-b452-a12daf9426f2",
              "parentUUID": "01bf0c33-1921-493b-a9bc-84097aa0f065",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "14164621-f834-4069-a699-67dfe150f2a0",
            "23cd6fd8-5eb2-4fc6-9a28-d821dc5632d6",
            "3116ab1b-87f2-4dbc-bbbe-4c559ad166b4",
            "6a6e2c13-a207-4da5-b4c1-f35ec340ae8b",
            "a518c055-5ed9-458b-a285-13797c6e3ea6",
            "c01ab83d-9f12-482e-b452-a12daf9426f2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 371,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "0b4fcb5e-4bbe-45eb-9ba5-7091cad5afef",
      "title": "",
      "fullFile": "cypress\\e2e\\Step2-KeyExchange.cy.js",
      "file": "cypress\\e2e\\Step2-KeyExchange.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b67331bf-4353-46fd-9051-ccab46137369",
          "title": "API Test - Card on File Key exchange key",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TestCase-1: Host Id should be mandatory",
              "fullTitle": "API Test - Card on File Key exchange key TestCase-1: Host Id should be mandatory",
              "timedOut": null,
              "duration": 58,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread({}, _baseRequest.Req_KeyExchange);\nconst {\n  responseMessage\n} = this.activityContent.fieldValidation;\nconst expectedResponse = (0, _baseResponse.Error_FieldValidation)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_KeyExchange, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode, 'Verified response code').to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage, 'Verified the message').to.eq(expectedResponse.responseMessage);\n});",
              "err": {},
              "uuid": "a6d1d0eb-b0d1-4763-a5f8-77796bb1ed7c",
              "parentUUID": "b67331bf-4353-46fd-9051-ccab46137369",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestCase-2: Terminal Public Key should be mandatory",
              "fullTitle": "API Test - Card on File Key exchange key TestCase-2: Terminal Public Key should be mandatory",
              "timedOut": null,
              "duration": 45,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread(_objectSpread({}, _baseRequest.Req_KeyExchange), {}, {\n  hostId: hostInfo.hostId,\n  terminalPublicKey: \"\"\n});\nconst {\n  responseMessage\n} = this.activityContent.fieldValidation;\nconst expectedResponse = (0, _baseResponse.Error_FieldValidation)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_KeyExchange, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode, 'Verified response code').to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage, 'Verified the message').to.eq(expectedResponse.responseMessage);\n});",
              "err": {},
              "uuid": "4bf05abf-0919-4815-99fe-1746c81d2abe",
              "parentUUID": "b67331bf-4353-46fd-9051-ccab46137369",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestCase-3: Terminal ID should be mandatory",
              "fullTitle": "API Test - Card on File Key exchange key TestCase-3: Terminal ID should be mandatory",
              "timedOut": null,
              "duration": 42,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread(_objectSpread({}, _baseRequest.Req_KeyExchange), {}, {\n  hostId: hostInfo.hostId,\n  terminalId: \"\"\n});\nconst {\n  responseMessage\n} = this.activityContent.fieldValidation;\nconst expectedResponse = (0, _baseResponse.Error_FieldValidation)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_KeyExchange, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode, 'Verified response code').to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage, 'Verified the message').to.eq(expectedResponse.responseMessage);\n});",
              "err": {},
              "uuid": "2288317d-5906-46b5-aee5-02732e7cc468",
              "parentUUID": "b67331bf-4353-46fd-9051-ccab46137369",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestCase-4: Invalid host Id should not accepeted",
              "fullTitle": "API Test - Card on File Key exchange key TestCase-4: Invalid host Id should not accepeted",
              "timedOut": null,
              "duration": 42,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread(_objectSpread({}, _baseRequest.Req_KeyExchange), {}, {\n  hostId: \"Invalid\"\n});\nconst {\n  responseMessage\n} = this.activityContent.invalidHostId;\nconst expectedResponse = (0, _baseResponse.Error_BusinessError)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_KeyExchange, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode, 'Verified response code').to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage, 'Verified the message').to.eq(expectedResponse.responseMessage);\n});",
              "err": {},
              "uuid": "eb65e18c-0659-4fd2-8f9e-f4e5b2b2666e",
              "parentUUID": "b67331bf-4353-46fd-9051-ccab46137369",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestCase-5: Host Id shuld be added success with valid data",
              "fullTitle": "API Test - Card on File Key exchange key TestCase-5: Host Id shuld be added success with valid data",
              "timedOut": null,
              "duration": 329,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread(_objectSpread({}, _baseRequest.Req_KeyExchange), {}, {\n  hostId: hostInfo.hostId\n});\nconst {\n  responseMessage\n} = this.activityContent.pubKeyExchangeSuccessful;\nconst expectedResponse = (0, _baseResponse.Success)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_KeyExchange, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode, 'Verified response code').to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage, 'Verified the message').to.eq(expectedResponse.responseMessage);\n  //   if (response.body.data) {\n  //     const { hostId, hostName, allowedIp } = response.body.data;\n  //     // Create the hostInfo object to store\n  //     const hostInfo = {\n  //       hostId,\n  //       hostName,\n  //       allowedIp\n  //     };\n  //     // Write the hostInfo object to the JSON file\n  //     cy.writeFile('cypress/fixtures/value/hostInfo.json', hostInfo).then(() => {\n  //       cy.log('Host information saved successfully:', hostInfo);\n  //     });\n  //   }\n});",
              "err": {},
              "uuid": "5d463e33-f7f1-4683-8504-59e704c96b32",
              "parentUUID": "b67331bf-4353-46fd-9051-ccab46137369",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a6d1d0eb-b0d1-4763-a5f8-77796bb1ed7c",
            "4bf05abf-0919-4815-99fe-1746c81d2abe",
            "2288317d-5906-46b5-aee5-02732e7cc468",
            "eb65e18c-0659-4fd2-8f9e-f4e5b2b2666e",
            "5d463e33-f7f1-4683-8504-59e704c96b32"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 516,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "f24e2da4-48f3-4251-b55f-1e6e801f7b6f",
      "title": "",
      "fullFile": "cypress\\e2e\\Step3-GetCofKek.cy.js",
      "file": "cypress\\e2e\\Step3-GetCofKek.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5f279115-7bcf-48e1-96c3-621a9a9af7c8",
          "title": "API Test - Card on File Key exchange key",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TestCase-1: Host Id should be mandatory",
              "fullTitle": "API Test - Card on File Key exchange key TestCase-1: Host Id should be mandatory",
              "timedOut": null,
              "duration": 58,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread({}, _baseRequest.Req_GetCofKek);\nconst {\n  responseMessage\n} = this.activityContent.fieldValidation;\nconst expectedResponse = (0, _baseResponse.Error_FieldValidation)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_GetCofKek, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode, 'Verified response code').to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage, 'Verified the message').to.eq(expectedResponse.responseMessage);\n});",
              "err": {},
              "uuid": "b218b7b4-462e-43b7-9e9f-d77d4409708b",
              "parentUUID": "5f279115-7bcf-48e1-96c3-621a9a9af7c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestCase-2: Invalid Host ID should not be allowed",
              "fullTitle": "API Test - Card on File Key exchange key TestCase-2: Invalid Host ID should not be allowed",
              "timedOut": null,
              "duration": 53,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread(_objectSpread({}, _baseRequest.Req_GetCofKek), {}, {\n  hostId: \"Invalid\"\n});\nconst {\n  responseMessage\n} = this.activityContent.invalidHostId;\nconst expectedResponse = (0, _baseResponse.Error_BusinessError)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_GetCofKek, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode, 'Verified response code').to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage, 'Verified the message').to.eq(expectedResponse.responseMessage);\n});",
              "err": {},
              "uuid": "43f8f243-436d-4061-9bd9-50012a5adf9c",
              "parentUUID": "5f279115-7bcf-48e1-96c3-621a9a9af7c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestCase-3: Valid request should provide requestedKey and keyVersion",
              "fullTitle": "API Test - Card on File Key exchange key TestCase-3: Valid request should provide requestedKey and keyVersion",
              "timedOut": null,
              "duration": 80,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread(_objectSpread({}, _baseRequest.Req_GetCofKek), {}, {\n  hostId: hostInfo.hostId\n});\nconst {\n  responseMessage\n} = this.activityContent.successCofKek;\nconst expectedResponse = (0, _baseResponse.Success)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_GetCofKek, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode).to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage).to.eq(expectedResponse.responseMessage);\n  if (response.status === 200 && response.body.data) {\n    const {\n      keyVersion\n    } = response.body.data;\n    // Read the existing hostInfo from the JSON file\n    cy.readFile('cypress/fixtures/value/hostInfo.json').then(existingHostInfo => {\n      // Update only the cofkekVersion\n      const updatedHostInfo = _objectSpread(_objectSpread({}, existingHostInfo), {}, {\n        cofkekVersion: keyVersion\n      });\n      // Write the updated hostInfo back to the JSON file\n      cy.writeFile('cypress/fixtures/value/hostInfo.json', updatedHostInfo).then(() => {\n        cy.log('Host information updated successfully:', updatedHostInfo);\n      });\n    });\n  }\n});",
              "err": {},
              "uuid": "022b2ae3-467e-497b-8f55-f59ce99444ec",
              "parentUUID": "5f279115-7bcf-48e1-96c3-621a9a9af7c8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b218b7b4-462e-43b7-9e9f-d77d4409708b",
            "43f8f243-436d-4061-9bd9-50012a5adf9c",
            "022b2ae3-467e-497b-8f55-f59ce99444ec"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 191,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "553f4a7b-2987-4e9b-a4e7-2ffbe2a81ab1",
      "title": "",
      "fullFile": "cypress\\e2e\\Step4-GetCofDek.cy.js",
      "file": "cypress\\e2e\\Step4-GetCofDek.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c1fca3b8-592e-435b-afd4-9d952c4cea36",
          "title": "API Test - Card on File Data exchange key",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TestCase-1: Host Id should be mandatory",
              "fullTitle": "API Test - Card on File Data exchange key TestCase-1: Host Id should be mandatory",
              "timedOut": null,
              "duration": 58,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread({}, _baseRequest.Req_GetCofDek);\nconst {\n  responseMessage\n} = this.activityContent.fieldValidation;\nconst expectedResponse = (0, _baseResponse.Error_FieldValidation)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_GetCofDek, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode, 'Verified response code').to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage, 'Verified the message').to.eq(expectedResponse.responseMessage);\n});",
              "err": {},
              "uuid": "f50edf82-997f-49c6-9d4d-37f4f15256d9",
              "parentUUID": "c1fca3b8-592e-435b-afd4-9d952c4cea36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestCase-2: kekVersion should be mandatory",
              "fullTitle": "API Test - Card on File Data exchange key TestCase-2: kekVersion should be mandatory",
              "timedOut": null,
              "duration": 41,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread({}, _baseRequest.Req_GetCofDek);\nconst {\n  responseMessage\n} = this.activityContent.fieldValidation;\nconst expectedResponse = (0, _baseResponse.Error_FieldValidation)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_GetCofDek, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode, 'Verified response code').to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage, 'Verified the message').to.eq(expectedResponse.responseMessage);\n});",
              "err": {},
              "uuid": "5d6b624a-eb8a-4acc-ac34-be24f7f9d9d4",
              "parentUUID": "c1fca3b8-592e-435b-afd4-9d952c4cea36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestCase-3: Invalid Host ID should not be allowed",
              "fullTitle": "API Test - Card on File Data exchange key TestCase-3: Invalid Host ID should not be allowed",
              "timedOut": null,
              "duration": 51,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread(_objectSpread({}, _baseRequest.Req_GetCofDek), {}, {\n  hostId: \"Invalid\"\n});\nconst {\n  responseMessage\n} = this.activityContent.invalidHostId;\nconst expectedResponse = (0, _baseResponse.Error_BusinessError)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_GetCofDek, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode, 'Verified response code').to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage, 'Verified the message').to.eq(expectedResponse.responseMessage);\n});",
              "err": {},
              "uuid": "280b1a28-9be2-4f9a-96a7-71d864eb98cb",
              "parentUUID": "c1fca3b8-592e-435b-afd4-9d952c4cea36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestCase-4: Invalid kekVersion should not be allowed",
              "fullTitle": "API Test - Card on File Data exchange key TestCase-4: Invalid kekVersion should not be allowed",
              "timedOut": null,
              "duration": 42,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread(_objectSpread({}, _baseRequest.Req_GetCofDek), {}, {\n  hostId: hostInfo.hostId,\n  kekVersion: \"11\"\n});\nconst {\n  responseMessage\n} = this.activityContent.invalidKekVersion;\nconst expectedResponse = (0, _baseResponse.Error_BusinessError)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_GetCofDek, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode, 'Verified response code').to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage, 'Verified the message').to.eq(expectedResponse.responseMessage);\n});",
              "err": {},
              "uuid": "33a7eb27-e9e5-49e5-bc38-4da765baa0d0",
              "parentUUID": "c1fca3b8-592e-435b-afd4-9d952c4cea36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestCase-5: Valid request should provide requestedKey and keyVersion",
              "fullTitle": "API Test - Card on File Data exchange key TestCase-5: Valid request should provide requestedKey and keyVersion",
              "timedOut": null,
              "duration": 63,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread(_objectSpread({}, _baseRequest.Req_GetCofDek), {}, {\n  hostId: hostInfo.hostId\n});\nconst {\n  responseMessage\n} = this.activityContent.successCofKek;\nconst expectedResponse = (0, _baseResponse.Success)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_GetCofDek, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode).to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage).to.eq(expectedResponse.responseMessage);\n  if (response.status === 200 && response.body.data) {\n    const {\n      keyVersion\n    } = response.body.data;\n    // Read the existing hostInfo from the JSON file\n    cy.readFile('cypress/fixtures/value/hostInfo.json').then(existingHostInfo => {\n      // Update only the cofkekVersion\n      const updatedHostInfo = _objectSpread(_objectSpread({}, existingHostInfo), {}, {\n        cofDekVersion: keyVersion\n      });\n      // Write the updated hostInfo back to the JSON file\n      cy.writeFile('cypress/fixtures/value/hostInfo.json', updatedHostInfo).then(() => {\n        cy.log('Host information updated successfully:', updatedHostInfo);\n      });\n    });\n  }\n});",
              "err": {},
              "uuid": "a0e5592b-167f-4090-b854-b480ba31d972",
              "parentUUID": "c1fca3b8-592e-435b-afd4-9d952c4cea36",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f50edf82-997f-49c6-9d4d-37f4f15256d9",
            "5d6b624a-eb8a-4acc-ac34-be24f7f9d9d4",
            "280b1a28-9be2-4f9a-96a7-71d864eb98cb",
            "33a7eb27-e9e5-49e5-bc38-4da765baa0d0",
            "a0e5592b-167f-4090-b854-b480ba31d972"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 255,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "025aa252-b8b3-47f1-8832-b000db55d2c8",
      "title": "",
      "fullFile": "cypress\\e2e\\Step5-GetTrnsKek.cy.js",
      "file": "cypress\\e2e\\Step5-GetTrnsKek.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "51a19dec-395f-4e12-bd7a-6bd23956605a",
          "title": "API Test - Card on File Key exchange key",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TestCase-1: Host Id should be mandatory",
              "fullTitle": "API Test - Card on File Key exchange key TestCase-1: Host Id should be mandatory",
              "timedOut": null,
              "duration": 60,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread({}, _baseRequest.Req_GetTransKek);\nconst {\n  responseMessage\n} = this.activityContent.fieldValidation;\nconst expectedResponse = (0, _baseResponse.Error_FieldValidation)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_GetTransKek, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode, 'Verified response code').to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage, 'Verified the message').to.eq(expectedResponse.responseMessage);\n});",
              "err": {},
              "uuid": "9c9335d6-5594-4a36-bf46-563b6164bb73",
              "parentUUID": "51a19dec-395f-4e12-bd7a-6bd23956605a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestCase-2: Invalid Host ID should not be allowed",
              "fullTitle": "API Test - Card on File Key exchange key TestCase-2: Invalid Host ID should not be allowed",
              "timedOut": null,
              "duration": 43,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread(_objectSpread({}, _baseRequest.Req_GetTransKek), {}, {\n  hostId: \"Invalid\"\n});\nconst {\n  responseMessage\n} = this.activityContent.invalidHostId;\nconst expectedResponse = (0, _baseResponse.Error_BusinessError)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_GetTransKek, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode, 'Verified response code').to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage, 'Verified the message').to.eq(expectedResponse.responseMessage);\n});",
              "err": {},
              "uuid": "230bd68d-762b-4e57-86a2-d98cb7d20362",
              "parentUUID": "51a19dec-395f-4e12-bd7a-6bd23956605a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestCase-3: Valid request should provide requestedKey and keyVersion",
              "fullTitle": "API Test - Card on File Key exchange key TestCase-3: Valid request should provide requestedKey and keyVersion",
              "timedOut": null,
              "duration": 82,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread(_objectSpread({}, _baseRequest.Req_GetTransKek), {}, {\n  hostId: hostInfo.hostId\n});\nconst {\n  responseMessage\n} = this.activityContent.successCofKek;\nconst expectedResponse = (0, _baseResponse.Success)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_GetTransKek, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode).to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage).to.eq(expectedResponse.responseMessage);\n  if (response.status === 200 && response.body.data) {\n    const {\n      keyVersion\n    } = response.body.data;\n    // Read the existing hostInfo from the JSON file\n    cy.readFile('cypress/fixtures/value/hostInfo.json').then(existingHostInfo => {\n      // Update only the cofkekVersion\n      const updatedHostInfo = _objectSpread(_objectSpread({}, existingHostInfo), {}, {\n        transkekVersion: keyVersion\n      });\n      // Write the updated hostInfo back to the JSON file\n      cy.writeFile('cypress/fixtures/value/hostInfo.json', updatedHostInfo).then(() => {\n        cy.log('Host information updated successfully:', updatedHostInfo);\n      });\n    });\n  }\n});",
              "err": {},
              "uuid": "4055d6b1-5879-4f5f-9270-f6ae81092359",
              "parentUUID": "51a19dec-395f-4e12-bd7a-6bd23956605a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9c9335d6-5594-4a36-bf46-563b6164bb73",
            "230bd68d-762b-4e57-86a2-d98cb7d20362",
            "4055d6b1-5879-4f5f-9270-f6ae81092359"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 185,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "3863eb32-d6dc-4b72-a995-07d2c4ce9090",
      "title": "",
      "fullFile": "cypress\\e2e\\Step6-GetTransDek.cy.js",
      "file": "cypress\\e2e\\Step6-GetTransDek.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5a8cb9d7-e41b-48c6-b5f8-a4e52e18a797",
          "title": "API Test - Card on File Data exchange key",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TestCase-1: Host Id should be mandatory",
              "fullTitle": "API Test - Card on File Data exchange key TestCase-1: Host Id should be mandatory",
              "timedOut": null,
              "duration": 79,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread({}, _baseRequest.Req_GetTransDek);\nconst {\n  responseMessage\n} = this.activityContent.fieldValidation;\nconst expectedResponse = (0, _baseResponse.Error_FieldValidation)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_GetTransDek, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode, 'Verified response code').to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage, 'Verified the message').to.eq(expectedResponse.responseMessage);\n});",
              "err": {},
              "uuid": "e45256f3-a74f-4634-a327-98b5ce4bec23",
              "parentUUID": "5a8cb9d7-e41b-48c6-b5f8-a4e52e18a797",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestCase-2: kekVersion should be mandatory",
              "fullTitle": "API Test - Card on File Data exchange key TestCase-2: kekVersion should be mandatory",
              "timedOut": null,
              "duration": 45,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread({}, _baseRequest.Req_GetTransDek);\nconst {\n  responseMessage\n} = this.activityContent.fieldValidation;\nconst expectedResponse = (0, _baseResponse.Error_FieldValidation)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_GetTransDek, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode, 'Verified response code').to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage, 'Verified the message').to.eq(expectedResponse.responseMessage);\n});",
              "err": {},
              "uuid": "938c36a7-03f1-4dc6-b30a-411b6aee3b5b",
              "parentUUID": "5a8cb9d7-e41b-48c6-b5f8-a4e52e18a797",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestCase-3: Invalid Host ID should not be allowed",
              "fullTitle": "API Test - Card on File Data exchange key TestCase-3: Invalid Host ID should not be allowed",
              "timedOut": null,
              "duration": 43,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread(_objectSpread({}, _baseRequest.Req_GetTransDek), {}, {\n  hostId: \"Invalid\"\n});\nconst {\n  responseMessage\n} = this.activityContent.invalidHostId;\nconst expectedResponse = (0, _baseResponse.Error_BusinessError)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_GetTransDek, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode, 'Verified response code').to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage, 'Verified the message').to.eq(expectedResponse.responseMessage);\n});",
              "err": {},
              "uuid": "d3e8b0e0-79c9-4029-9998-1d72ca509b8c",
              "parentUUID": "5a8cb9d7-e41b-48c6-b5f8-a4e52e18a797",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestCase-4: Invalid kekVersion should not be allowed",
              "fullTitle": "API Test - Card on File Data exchange key TestCase-4: Invalid kekVersion should not be allowed",
              "timedOut": null,
              "duration": 33,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread(_objectSpread({}, _baseRequest.Req_GetTransDek), {}, {\n  hostId: hostInfo.hostId,\n  kekVersion: \"11\"\n});\nconst {\n  responseMessage\n} = this.activityContent.invalidKekVersion;\nconst expectedResponse = (0, _baseResponse.Error_BusinessError)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_GetTransDek, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode, 'Verified response code').to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage, 'Verified the message').to.eq(expectedResponse.responseMessage);\n});",
              "err": {},
              "uuid": "1c56ebf2-6700-464b-bf6d-51a620a02c02",
              "parentUUID": "5a8cb9d7-e41b-48c6-b5f8-a4e52e18a797",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestCase-5: Valid request should provide requestedKey and keyVersion",
              "fullTitle": "API Test - Card on File Data exchange key TestCase-5: Valid request should provide requestedKey and keyVersion",
              "timedOut": null,
              "duration": 66,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread(_objectSpread({}, _baseRequest.Req_GetTransDek), {}, {\n  hostId: hostInfo.hostId,\n  kekVersion: hostInfo.transkekVersion\n});\nconst {\n  responseMessage\n} = this.activityContent.successCofKek;\nconst expectedResponse = (0, _baseResponse.Success)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_GetTransDek, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode).to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage).to.eq(expectedResponse.responseMessage);\n  if (response.status === 200 && response.body.data) {\n    const {\n      keyVersion\n    } = response.body.data;\n    // Read the existing hostInfo from the JSON file\n    cy.readFile('cypress/fixtures/value/hostInfo.json').then(existingHostInfo => {\n      // Update only the cofkekVersion\n      const updatedHostInfo = _objectSpread(_objectSpread({}, existingHostInfo), {}, {\n        transDekVersion: keyVersion\n      });\n      // Write the updated hostInfo back to the JSON file\n      cy.writeFile('cypress/fixtures/value/hostInfo.json', updatedHostInfo).then(() => {\n        cy.log('Host information updated successfully:', updatedHostInfo);\n      });\n    });\n  }\n});",
              "err": {},
              "uuid": "1b4f93fd-5f27-481a-bcba-54413ee7381c",
              "parentUUID": "5a8cb9d7-e41b-48c6-b5f8-a4e52e18a797",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e45256f3-a74f-4634-a327-98b5ce4bec23",
            "938c36a7-03f1-4dc6-b30a-411b6aee3b5b",
            "d3e8b0e0-79c9-4029-9998-1d72ca509b8c",
            "1c56ebf2-6700-464b-bf6d-51a620a02c02",
            "1b4f93fd-5f27-481a-bcba-54413ee7381c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 266,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "4ccbacd3-513c-4ede-ae0d-54be07b7f523",
      "title": "",
      "fullFile": "cypress\\e2e\\Step7-GetKek.cy.js",
      "file": "cypress\\e2e\\Step7-GetKek.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f6c7dd99-86a9-4bdc-86d7-f97ebd869dff",
          "title": "API Test - Card on File Key exchange key",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TestCase-1: Host Id should be mandatory",
              "fullTitle": "API Test - Card on File Key exchange key TestCase-1: Host Id should be mandatory",
              "timedOut": null,
              "duration": 70,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread({}, _baseRequest.Req_GetKek);\nconst {\n  responseMessage\n} = this.activityContent.fieldValidation;\nconst expectedResponse = (0, _baseResponse.Error_FieldValidation)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_GetKek, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode, 'Verified response code').to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage, 'Verified the message').to.eq(expectedResponse.responseMessage);\n});",
              "err": {},
              "uuid": "cffe30c5-3705-4a45-a2b1-42c243338366",
              "parentUUID": "f6c7dd99-86a9-4bdc-86d7-f97ebd869dff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestCase-2: Invalid Host ID should not be allowed",
              "fullTitle": "API Test - Card on File Key exchange key TestCase-2: Invalid Host ID should not be allowed",
              "timedOut": null,
              "duration": 53,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread(_objectSpread({}, _baseRequest.Req_GetKek), {}, {\n  hostId: \"Invalid\"\n});\nconst {\n  responseMessage\n} = this.activityContent.invalidHostId;\nconst expectedResponse = (0, _baseResponse.Error_BusinessError)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_GetKek, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode, 'Verified response code').to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage, 'Verified the message').to.eq(expectedResponse.responseMessage);\n});",
              "err": {},
              "uuid": "8d1752d6-22bb-42c6-8125-bebf6c43a49a",
              "parentUUID": "f6c7dd99-86a9-4bdc-86d7-f97ebd869dff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestCase-3: Valid request should provide requestedKey and keyVersion",
              "fullTitle": "API Test - Card on File Key exchange key TestCase-3: Valid request should provide requestedKey and keyVersion",
              "timedOut": null,
              "duration": 74,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread(_objectSpread({}, _baseRequest.Req_GetKek), {}, {\n  hostId: hostInfo.hostId\n});\nconst {\n  responseMessage\n} = this.activityContent.successCofKek;\nconst expectedResponse = (0, _baseResponse.Success)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_GetKek, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode).to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage).to.eq(expectedResponse.responseMessage);\n  if (response.status === 200 && response.body.data) {\n    const {\n      keyVersion\n    } = response.body.data;\n    const updatedHostInfo = _objectSpread(_objectSpread({}, hostInfo), {}, {\n      kekVersion: keyVersion\n    });\n    cy.writeFile('cypress/fixtures/value/hostInfo.json', updatedHostInfo).then(() => {\n      cy.log('Host information updated successfully:', updatedHostInfo);\n    });\n  }\n});",
              "err": {},
              "uuid": "1f92a0ce-5790-4fb9-828a-5e52fe127cd5",
              "parentUUID": "f6c7dd99-86a9-4bdc-86d7-f97ebd869dff",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cffe30c5-3705-4a45-a2b1-42c243338366",
            "8d1752d6-22bb-42c6-8125-bebf6c43a49a",
            "1f92a0ce-5790-4fb9-828a-5e52fe127cd5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 197,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "3e9d3d0c-c96c-455c-9e0c-b16c5c3b1673",
      "title": "",
      "fullFile": "cypress\\e2e\\Step8-GetDek.cy.js",
      "file": "cypress\\e2e\\Step8-GetDek.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "649d8cff-331f-438d-b937-c8fde5426425",
          "title": "API Test - Card on File Data exchange key",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TestCase-1: Host Id should be mandatory",
              "fullTitle": "API Test - Card on File Data exchange key TestCase-1: Host Id should be mandatory",
              "timedOut": null,
              "duration": 82,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread({}, _baseRequest.Req_GetDek);\nconst {\n  responseMessage\n} = this.activityContent.fieldValidation;\nconst expectedResponse = (0, _baseResponse.Error_FieldValidation)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_GetDek, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode, 'Verified response code').to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage, 'Verified the message').to.eq(expectedResponse.responseMessage);\n});",
              "err": {},
              "uuid": "6a89c279-7d8b-402b-9a1f-45ea48362922",
              "parentUUID": "649d8cff-331f-438d-b937-c8fde5426425",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestCase-2: kekVersion should be mandatory",
              "fullTitle": "API Test - Card on File Data exchange key TestCase-2: kekVersion should be mandatory",
              "timedOut": null,
              "duration": 53,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread({}, _baseRequest.Req_GetDek);\nconst {\n  responseMessage\n} = this.activityContent.fieldValidation;\nconst expectedResponse = (0, _baseResponse.Error_FieldValidation)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_GetDek, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode, 'Verified response code').to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage, 'Verified the message').to.eq(expectedResponse.responseMessage);\n});",
              "err": {},
              "uuid": "e31f2eb5-f160-4d6a-ad0a-74af3652c8cb",
              "parentUUID": "649d8cff-331f-438d-b937-c8fde5426425",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestCase-3: Invalid Host ID should not be allowed",
              "fullTitle": "API Test - Card on File Data exchange key TestCase-3: Invalid Host ID should not be allowed",
              "timedOut": null,
              "duration": 62,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread(_objectSpread({}, _baseRequest.Req_GetDek), {}, {\n  hostId: \"Invalid\"\n});\nconst {\n  responseMessage\n} = this.activityContent.invalidHostId;\nconst expectedResponse = (0, _baseResponse.Error_BusinessError)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_GetDek, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode, 'Verified response code').to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage, 'Verified the message').to.eq(expectedResponse.responseMessage);\n});",
              "err": {},
              "uuid": "149d1ffe-37f0-46b5-97a2-a558dc6bddf0",
              "parentUUID": "649d8cff-331f-438d-b937-c8fde5426425",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestCase-4: Invalid kekVersion should not be allowed",
              "fullTitle": "API Test - Card on File Data exchange key TestCase-4: Invalid kekVersion should not be allowed",
              "timedOut": null,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread(_objectSpread({}, _baseRequest.Req_GetDek), {}, {\n  hostId: hostInfo.hostId,\n  kekVersion: \"11\"\n});\nconst {\n  responseMessage\n} = this.activityContent.invalidKekVersion;\nconst expectedResponse = (0, _baseResponse.Error_BusinessError)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_GetDek, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode, 'Verified response code').to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage, 'Verified the message').to.eq(expectedResponse.responseMessage);\n});",
              "err": {},
              "uuid": "91f8b34e-02c2-418c-8ec8-4aaff1c9feea",
              "parentUUID": "649d8cff-331f-438d-b937-c8fde5426425",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestCase-5: Valid request should provide requestedKey and keyVersion",
              "fullTitle": "API Test - Card on File Data exchange key TestCase-5: Valid request should provide requestedKey and keyVersion",
              "timedOut": null,
              "duration": 52,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread(_objectSpread({}, _baseRequest.Req_GetDek), {}, {\n  hostId: hostInfo.hostId,\n  kekVersion: hostInfo.kekVersion\n});\nconst {\n  responseMessage\n} = this.activityContent.successCofKek;\nconst expectedResponse = (0, _baseResponse.Success)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_GetDek, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode).to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage).to.eq(expectedResponse.responseMessage);\n  if (response.status === 200 && response.body.data) {\n    const {\n      keyVersion\n    } = response.body.data;\n    const updatedHostInfo = _objectSpread(_objectSpread({}, hostInfo), {}, {\n      dekVersion: keyVersion\n    });\n    cy.writeFile('cypress/fixtures/value/hostInfo.json', updatedHostInfo).then(() => {\n      cy.log('Host information updated successfully:', updatedHostInfo);\n    });\n  }\n});",
              "err": {},
              "uuid": "8057b53a-000e-4045-a791-2d4bb82b314d",
              "parentUUID": "649d8cff-331f-438d-b937-c8fde5426425",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6a89c279-7d8b-402b-9a1f-45ea48362922",
            "e31f2eb5-f160-4d6a-ad0a-74af3652c8cb",
            "149d1ffe-37f0-46b5-97a2-a558dc6bddf0",
            "91f8b34e-02c2-418c-8ec8-4aaff1c9feea",
            "8057b53a-000e-4045-a791-2d4bb82b314d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 286,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "4a617199-913b-4823-8988-76191cbd8d6a",
      "title": "",
      "fullFile": "cypress\\e2e\\Step9-Encryption.cy.js",
      "file": "cypress\\e2e\\Step9-Encryption.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4a3aaf32-bcbf-4fe5-bcda-2411d47a97d6",
          "title": "API Test - Card on File Data exchange key",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TestCase-1: Host Id should be mandatory",
              "fullTitle": "API Test - Card on File Data exchange key TestCase-1: Host Id should be mandatory",
              "timedOut": null,
              "duration": 67,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread({}, _baseRequest.Req_EncryptData);\nconst {\n  responseMessage\n} = this.activityContent.fieldValidation;\nconst expectedResponse = (0, _baseResponse.Error_FieldValidation)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_EncryptData, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode, 'Verified response code').to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage, 'Verified the message').to.eq(expectedResponse.responseMessage);\n});",
              "err": {},
              "uuid": "6fb6b5c1-18d8-449c-a7bf-8cb3ec1962ed",
              "parentUUID": "4a3aaf32-bcbf-4fe5-bcda-2411d47a97d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestCase-2: SensitiveData should be mandatory",
              "fullTitle": "API Test - Card on File Data exchange key TestCase-2: SensitiveData should be mandatory",
              "timedOut": null,
              "duration": 45,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread(_objectSpread({}, _baseRequest.Req_EncryptData), {}, {\n  hostId: hostInfo.hostId,\n  sensitiveData: \"\"\n});\nconst {\n  responseMessage\n} = this.activityContent.fieldValidation;\nconst expectedResponse = (0, _baseResponse.Error_FieldValidation)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_EncryptData, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode, 'Verified response code').to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage, 'Verified the message').to.eq(expectedResponse.responseMessage);\n});",
              "err": {},
              "uuid": "d57d225a-886e-4cf6-a790-892ae8ee04cb",
              "parentUUID": "4a3aaf32-bcbf-4fe5-bcda-2411d47a97d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestCase-3: Invalid Host ID should not be allowed",
              "fullTitle": "API Test - Card on File Data exchange key TestCase-3: Invalid Host ID should not be allowed",
              "timedOut": null,
              "duration": 44,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread(_objectSpread({}, _baseRequest.Req_EncryptData), {}, {\n  hostId: \"Invalid\"\n});\nconst {\n  responseMessage\n} = this.activityContent.invalidHostId;\nconst expectedResponse = (0, _baseResponse.Error_BusinessError)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_EncryptData, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode, 'Verified response code').to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage, 'Verified the message').to.eq(expectedResponse.responseMessage);\n});",
              "err": {},
              "uuid": "ed1871c6-769f-44a1-bc47-9dc70d110768",
              "parentUUID": "4a3aaf32-bcbf-4fe5-bcda-2411d47a97d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestCase-5: Sansative data successfully",
              "fullTitle": "API Test - Card on File Data exchange key TestCase-5: Sansative data successfully",
              "timedOut": null,
              "duration": 48,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread(_objectSpread({}, _baseRequest.Req_EncryptData), {}, {\n  hostId: hostInfo.hostId,\n  sensitiveData: hostInfo.sensitiveData\n});\nconst {\n  responseMessage\n} = this.activityContent.dataEncrypetSuccessful;\nconst expectedResponse = (0, _baseResponse.Success)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_EncryptData, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode).to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage).to.eq(expectedResponse.responseMessage);\n  if (response.status === 200 && response.body.data) {\n    const {\n      encryptedData\n    } = response.body.data;\n    const updatedHostInfo = _objectSpread(_objectSpread({}, hostInfo), {}, {\n      encryptedData: encryptedData\n    });\n    cy.writeFile('cypress/fixtures/value/hostInfo.json', updatedHostInfo).then(() => {\n      cy.log('Host information updated successfully:', updatedHostInfo);\n    });\n  }\n});",
              "err": {},
              "uuid": "2ba30524-4cc8-4883-b5a3-bcc703f7a97f",
              "parentUUID": "4a3aaf32-bcbf-4fe5-bcda-2411d47a97d6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6fb6b5c1-18d8-449c-a7bf-8cb3ec1962ed",
            "d57d225a-886e-4cf6-a790-892ae8ee04cb",
            "ed1871c6-769f-44a1-bc47-9dc70d110768",
            "2ba30524-4cc8-4883-b5a3-bcc703f7a97f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 204,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "c3b525e6-932a-43af-b993-1b952cbd8893",
      "title": "",
      "fullFile": "cypress\\e2e\\Step91-Decryption.cy.js",
      "file": "cypress\\e2e\\Step91-Decryption.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8b103e93-669c-4e57-8fe4-ce2e86537815",
          "title": "API Test - Card on File Data exchange key",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TestCase-1: Host Id should be mandatory",
              "fullTitle": "API Test - Card on File Data exchange key TestCase-1: Host Id should be mandatory",
              "timedOut": null,
              "duration": 73,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread({}, _baseRequest.Req_DecryptData);\nconst {\n  responseMessage\n} = this.activityContent.fieldValidation;\nconst expectedResponse = (0, _baseResponse.Error_FieldValidation)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_DecryptData, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode, 'Verified response code').to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage, 'Verified the message').to.eq(expectedResponse.responseMessage);\n});",
              "err": {},
              "uuid": "315ab743-ea71-4bc5-b917-c06c688bd311",
              "parentUUID": "8b103e93-669c-4e57-8fe4-ce2e86537815",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestCase-2: Encrypted Data should be mandatory",
              "fullTitle": "API Test - Card on File Data exchange key TestCase-2: Encrypted Data should be mandatory",
              "timedOut": null,
              "duration": 44,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread(_objectSpread({}, _baseRequest.Req_DecryptData), {}, {\n  hostId: hostInfo.hostId,\n  encryptedData: \"\"\n});\nconst {\n  responseMessage\n} = this.activityContent.fieldValidation;\nconst expectedResponse = (0, _baseResponse.Error_FieldValidation)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_DecryptData, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode, 'Verified response code').to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage, 'Verified the message').to.eq(expectedResponse.responseMessage);\n});",
              "err": {},
              "uuid": "ce5bf3f7-f349-46ab-bb3c-0fcd5c13b7d0",
              "parentUUID": "8b103e93-669c-4e57-8fe4-ce2e86537815",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestCase-3: keyVersionDek  should be mandatory",
              "fullTitle": "API Test - Card on File Data exchange key TestCase-3: keyVersionDek  should be mandatory",
              "timedOut": null,
              "duration": 44,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread(_objectSpread({}, _baseRequest.Req_DecryptData), {}, {\n  hostId: hostInfo.hostId,\n  keyVersionDek: \"\"\n});\nconst {\n  responseMessage\n} = this.activityContent.fieldValidation;\nconst expectedResponse = (0, _baseResponse.Error_FieldValidation)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_DecryptData, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode, 'Verified response code').to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage, 'Verified the message').to.eq(expectedResponse.responseMessage);\n});",
              "err": {},
              "uuid": "976c9c51-e49d-450a-bb52-7d32d4c6b73b",
              "parentUUID": "8b103e93-669c-4e57-8fe4-ce2e86537815",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestCase-4: Invalid Host ID should not be allowed",
              "fullTitle": "API Test - Card on File Data exchange key TestCase-4: Invalid Host ID should not be allowed",
              "timedOut": null,
              "duration": 46,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread(_objectSpread({}, _baseRequest.Req_DecryptData), {}, {\n  hostId: \"Invalid\"\n});\nconst {\n  responseMessage\n} = this.activityContent.invalidHostId;\nconst expectedResponse = (0, _baseResponse.Error_BusinessError)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_DecryptData, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode, 'Verified response code').to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage, 'Verified the message').to.eq(expectedResponse.responseMessage);\n});",
              "err": {},
              "uuid": "b326cbdf-c1c4-48f2-a21b-bf432268fe6a",
              "parentUUID": "8b103e93-669c-4e57-8fe4-ce2e86537815",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestCase-5: Invalid keyVersionDek should not be allowed",
              "fullTitle": "API Test - Card on File Data exchange key TestCase-5: Invalid keyVersionDek should not be allowed",
              "timedOut": null,
              "duration": 32,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread(_objectSpread({}, _baseRequest.Req_DecryptData), {}, {\n  hostId: hostInfo.hostId,\n  keyVersionDek: \"111\"\n});\nconst {\n  responseMessage\n} = this.activityContent.invalidDekVersion;\nconst expectedResponse = (0, _baseResponse.Error_BusinessError)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_DecryptData, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode, 'Verified response code').to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage, 'Verified the message').to.eq(expectedResponse.responseMessage);\n});",
              "err": {},
              "uuid": "0c32d68e-5524-4b39-bacd-c29bd0b03956",
              "parentUUID": "8b103e93-669c-4e57-8fe4-ce2e86537815",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TestCase-5: Decryption should be successful",
              "fullTitle": "API Test - Card on File Data exchange key TestCase-5: Decryption should be successful",
              "timedOut": null,
              "duration": 39,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestPayload = _objectSpread(_objectSpread({}, _baseRequest.Req_DecryptData), {}, {\n  hostId: hostInfo.hostId,\n  encryptedData: hostInfo.encryptedData\n});\nconst {\n  responseMessage\n} = this.activityContent.dataDecrypetSuccessful;\nconst expectedResponse = (0, _baseResponse.Success)(responseMessage);\n(0, _apiUtils.ApiRequestAndAssert)(_endPoint.URL_DecryptData, requestPayload, 'POST').then(response => {\n  cy.log(JSON.stringify(response));\n  expect(response.body.responseCode).to.eq(expectedResponse.responseCode);\n  expect(response.body.responseMessage).to.eq(expectedResponse.responseMessage);\n  if (response.status === 200 && response.body.data) {\n    const decryptedData = response.body.data.encryptedData;\n    expect(decryptedData).to.eq(hostInfo.sensitiveData);\n  }\n});",
              "err": {},
              "uuid": "795c4c2a-d1a5-4255-aa7f-4e747acc9232",
              "parentUUID": "8b103e93-669c-4e57-8fe4-ce2e86537815",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "315ab743-ea71-4bc5-b917-c06c688bd311",
            "ce5bf3f7-f349-46ab-bb3c-0fcd5c13b7d0",
            "976c9c51-e49d-450a-bb52-7d32d4c6b73b",
            "b326cbdf-c1c4-48f2-a21b-bf432268fe6a",
            "0c32d68e-5524-4b39-bacd-c29bd0b03956",
            "795c4c2a-d1a5-4255-aa7f-4e747acc9232"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 278,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": true,
        "json": true,
        "timestamp": "mmddyyyy_HHMMss",
        "reportTitle": "My Custom Report Title",
        "embeddedScreenshots": true,
        "inlineAssets": true,
        "charts": true
      },
      "version": "6.2.0"
    }
  }
}